<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue</title>
      <link href="/Vue/"/>
      <url>/Vue/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h5 id="1-说一说对vue的理解？"><a href="#1-说一说对vue的理解？" class="headerlink" title="1.说一说对vue的理解？"></a>1.说一说对vue的理解？</h5><p>1、MVVM是核心特性之一,其中M表示Model数据，V表示View视图，VM表示ViewMode视图模型层，主要用来连接Model和View</p><p>2、组件化开发思想:在vue中可以把图形和非图形的各种逻辑抽象为一个统一得到概念来实现开发模式，每个.vue文件就代表着一个组件</p><p>组件化的优势:</p><p>   降低了耦合度，可以通过组件快速完成需求</p><p>   调试方便，页面上很多地方使用同一个组件，在出问题时只需要调试这个地方就行了</p><p>   提高了可维护性，组件的维护成本低</p><p>3、vue有着特色的指令系统</p><p> 比如条件渲染v-if，列表渲染v-for，属性绑定v-bind，双向绑定v-model，事件绑定v-on等等，在没有这些指令之前，我们获取需要通过操作dom的形式进行一些操作，比较麻烦</p><h5 id="2-谈谈对生命周期的理解"><a href="#2-谈谈对生命周期的理解" class="headerlink" title="2.谈谈对生命周期的理解"></a>2.<strong>谈谈对生命周期的理解</strong></h5><p>1、beforeCreate组件实例被创建之前</p><ul><li>初始化vue实例，进行数据观测</li></ul><p>2、created组件实例已经被完全创建</p><ul><li>完成数据观测，属性与方法的运算，watch、event事件回调的配置</li><li>可调用methods中的方法，访问和修改data数据触发响应式渲染dom，可通过computed和watch完成数据计算</li><li>此时vm.$el 并没有被创建</li></ul><p>3、beforeMount组件挂载之前</p><ul><li>在此阶段可获取到vm.el</li><li>此阶段vm.el虽已完成DOM初始化，但并未挂载在el选项上</li></ul><p>4、mounted组件挂载到实例上去之后</p><ul><li>vm.el已完成DOM的挂载与渲染，此刻打印vm.$el，发现之前的挂载点及内容已被替换成新的DOM</li></ul><p>5、beforeupdated组件更新之前</p><ul><li>更新的数据必须是被渲染在模板上的（el、template、render之一）</li><li>此时view层还未更新</li><li>若在beforeUpdate中再次修改数据，不会再次触发更新方法</li></ul><p>6、updated组件数据更新之后</p><ul><li>完成view层的更新</li><li>若在updated中再次修改数据，会再次触发更新方法（beforeUpdate、updated）</li></ul><p>7、beforedestroy组件实例被销毁之前</p><ul><li>实例被销毁前调用，此时实例属性与方法仍可访问</li></ul><p>8、destoryed组件实例被销毁之后</p><ul><li>完全销毁一个实例。可清理它与其它实例的连接，解绑它的全部指令及事件监听器</li><li>并不能清除DOM，仅仅销毁实例</li></ul><p>9、activated，keepalive缓存组件激活时</p><p>10、deactivated，keepalive缓存的组件停止调用时</p><h5 id="3-数据请求在created和mounted中的区别"><a href="#3-数据请求在created和mounted中的区别" class="headerlink" title="3.数据请求在created和mounted中的区别"></a>3.<strong>数据请求在created和mounted中的区别</strong></h5><p>1、created的时候页面的dom还未生成，mounted的时候页面dom已经生成了</p><p>2、created获取数据比mounted更早，两者的相同点：都能拿到实例对象的属性和方法。</p><p>3、放在mounted中的请求有可能导致页面闪动(因为dom已经生成了)</p><h5 id="4vue里组件间通信的方式有哪些"><a href="#4vue里组件间通信的方式有哪些" class="headerlink" title="4vue里组件间通信的方式有哪些"></a>4<strong>vue里组件间通信的方式有哪些</strong></h5><p>1、vuex全局状态管理(pinia)</p><p>2、父组件通过标签进行值的传递，子组件通过props接收</p><p>3、eventbus来进行传递</p><p>4、子组件通过emit来进行发布事件</p><p>5、通过$parent和$children来进行传递</p><p>6、通过provide和inject来进行注入</p><p>7、通过ref进行传值</p><p>8.自定义事件</p><p>9.pubsub-js</p><p>10.插槽</p><p>11vuex</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器性能优化</title>
      <link href="/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h5 id="1-html渲染过程详解"><a href="#1-html渲染过程详解" class="headerlink" title="1.html渲染过程详解"></a>1.html渲染过程详解</h5><p>用户输入url地址，浏览器根据域名寻找IP地址<br>浏览器向服务器发送http请求，如果服务器段返回以301之类的重定向，浏览器根据相应头中的location再次发送请求<br>服务器端接受请求，处理请求生成html代码，返回给浏览器，这时的html页面代码可能是经过压缩的<br>浏览器接收服务器响应结果，如果有压缩则首先进行解压处理，紧接着就是页面解析渲染</p><p><strong>解析渲染该过程主要分为以下步骤：</strong></p><ol><li><strong>解析HTML</strong></li><li><strong>构建DOM树</strong></li><li><strong>DOM树与CSS样式进行附着构造呈现树</strong></li><li><strong>布局</strong></li><li><strong>绘制</strong></li></ol><h5 id="2-一个页面从输入URL到页面加载显示完成，这个过程发生的事。"><a href="#2-一个页面从输入URL到页面加载显示完成，这个过程发生的事。" class="headerlink" title="2.一个页面从输入URL到页面加载显示完成，这个过程发生的事。"></a>2.一个页面从输入URL到页面加载显示完成，这个过程发生的事。</h5><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poY2luaXQwL2FydGljbGUvZGV0YWlscy8xMDcyNTA2MTQvP29wc19yZXF1ZXN0X21pc2M9JnJlcXVlc3RfaWQ9JmJpel9pZD0xMDImdXRtX3Rlcm09JUU5JUExJUI1JUU5JTlEJUEyJUU2JUI4JUIyJUU2JTlGJTkzaHRtbCVFNyU5QSU4NCVFOCVCRiU4NyVFNyVBOCU4QiZ1dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfc2VhcmNoX3Jlc3VsdC5ub25lLXRhc2stYmxvZy0yfmFsbH5zb2JhaWR1d2VifmRlZmF1bHQtNC0xMDcyNTA2MTQuMTQyJTVFdjczJTVFaW5zZXJ0X2Rvd24xLDIwMSU1RXY0JTVFYWRkX2FzaywyMzklNUV2MiU1RWluc2VydF9jaGF0Z3B0JnNwbT0xMDE4LjIyMjYuMzAwMS40MTg3">(112条消息) HTML页面渲染的过程_zhcinit0的博客-CSDN博客_html渲染页面的过程</span></p><p>1.浏览器查找域名获得对应ip地址</p><p>2.浏览器向web服务器发送一个http请求</p><p>3.服务器重定向</p><p>4.浏览器跟踪重定向地址，请求相应资源</p><p>5.服务器处理请求</p><p>6.服务器返回一个http响应</p><p>7.浏览器进行html的解析以及渲染绘制制图</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/JavaScript/"/>
      <url>/JavaScript/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h6 id="1-什么是闭包？"><a href="#1-什么是闭包？" class="headerlink" title="1.什么是闭包？"></a><strong>1.什么是闭包？</strong></h6><p>内层函数+引用的外层函数变量 &#x3D; 闭包</p><p>闭包的主要应用就是进行数据的私用化，减少全局变量</p><p>闭包的内存泄露：</p><p><img data-src="https://cdn.jsdelivr.net/gh/147cai/blog-cdn/note/image-20230213220712311.png" alt="image-20230213220712311"></p><h6 id="2-宏任务和微任务？"><a href="#2-宏任务和微任务？" class="headerlink" title="2.宏任务和微任务？"></a><strong>2.宏任务和微任务？</strong></h6><ul><li><p>宏任务：setTimeout，setInterval，Ajax，DOM事件</p></li><li><p>微任务：Promise，process.nextTick</p><p>宏任务在异步任务中不需要连贯执行，微任务在异步任务中需要连贯执行</p></li></ul><p>微任务的执行时机要比宏任务早！（可以先记一哈，后面会继续说这点）</p><p>Dom事件不是异步操作，但是它依赖了eventloop机制，所以也归在这点里了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">200</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">300</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">400</span>)</span><br><span class="line"><span class="comment">// 答案为： 100 400 300 200</span></span><br></pre></td></tr></table></figure><h6 id="3-防抖和节流"><a href="#3-防抖和节流" class="headerlink" title="3.防抖和节流"></a>3.防抖和节流</h6><p><img data-src="https://cdn.jsdelivr.net/gh/147cai/blog-cdn/note/image-20230213224807631.png" alt="image-20230213224807631"></p><h6 id="4-js函数的几种声明方式"><a href="#4-js函数的几种声明方式" class="headerlink" title="4.js函数的几种声明方式"></a>4.js函数的几种声明方式</h6><p><img data-src="https://cdn.jsdelivr.net/gh/147cai/blog-cdn/note/image-20230213225234423.png" alt="image-20230213225234423"></p><h6 id="5-谈谈你对原型的理解？"><a href="#5-谈谈你对原型的理解？" class="headerlink" title="5.谈谈你对原型的理解？"></a>5.谈谈你对原型的理解？</h6><p>1、所有的引用类型（数组、函数、对象）可以自由扩展属性（除null以外）。</p><p>2、所有的引用类型都有一个’_ _ proto_ _’属性(也叫隐式原型，它是一个普通的对象)。</p><p>3、所有的函数都有一个’prototype’属性(这也叫显式原型，它也是一个普通的对象)。</p><p>4、所有引用类型，它的’_ _ proto_ _’属性指向它的构造函数的’prototype’属性。</p><p>5、当试图得到一个对象的属性时，如果这个对象本身不存在这个属性，那么就会去它的’_ _ proto_ _’属性(也就是它的构造函数的’prototype’属性)中去寻找。</p><h6 id="6-箭头函数和普通函数的区别？"><a href="#6-箭头函数和普通函数的区别？" class="headerlink" title="6.箭头函数和普通函数的区别？"></a>6.箭头函数和普通函数的区别？</h6><p>1.箭头函数比普通函数更简洁</p><p>2.箭头函数没有this指针</p><p>3.箭头函数继承的this指针永远不会改变，因此call，apply,bind等方法不能改变箭头函数中的</p><p> this指向</p><p>4.箭头函数不能作为构造函数使用</p><p>由于箭头函数时没有自己的this，且this指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用。</p><p>5.箭头函数没有自己的arguments</p><p>箭头函数没有自己的arguments对象。在箭头函数中访问arguments实际上获得的是它外层函数的arguments值。</p><ol start="6"><li>箭头函数没有prototype</li></ol><h5 id="7-说一说跨域是什么，如何解决跨域问题？"><a href="#7-说一说跨域是什么，如何解决跨域问题？" class="headerlink" title="7.说一说跨域是什么，如何解决跨域问题？"></a>7.说一说跨域是什么，如何解决跨域问题？</h5><p>跨域的概念：浏览器不能执行其它的网站的脚本，这由浏览器的同源策略造成的，也是浏览器施加安全的限制</p><p> 跨域解决方案： - jsonp - 前端proxy后端cors - 线上Nginx - websockt</p><h5 id="8-js类型"><a href="#8-js类型" class="headerlink" title="8.js类型"></a>8.js类型</h5><p>7种基本数据类型  </p><p>undefined</p><p>null</p><p>number</p><p>string</p><p>boolean</p><p>symbol</p><p>bigint</p><p>3种引用数据类型</p><p>object</p><p>function</p><p>array</p><h5 id="9-数据类型的检查方式有那些"><a href="#9-数据类型的检查方式有那些" class="headerlink" title="9.数据类型的检查方式有那些"></a>9.数据类型的检查方式有那些</h5><p>1.typeof</p><p>2.instanceof</p><p>3.constructor</p><p>4.object.prototype.toString.call()</p><h5 id="10-es6新增了那些新语法"><a href="#10-es6新增了那些新语法" class="headerlink" title="10 es6新增了那些新语法"></a>10 es6新增了那些新语法</h5><p>1.let const </p><p>2.解构赋值</p><p>3.模板字符串</p><p>4.map set 数组新方法如forEach find map() filter() Array.from()</p><p>5.箭头函数</p><p>6.类</p><p>7.promise和proxy</p><p>8.模块化</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 面试 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML+CSS</title>
      <link href="/HTML+CSS/"/>
      <url>/HTML+CSS/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h5 id="1-说一下浮动？"><a href="#1-说一下浮动？" class="headerlink" title="1.说一下浮动？"></a>1.说一下浮动？</h5><p>浮动是脱离文档的普通流存在的（可以看作是漂浮在普通流上），它可以左右浮动，直到它的外边缘遇到包含框或者另一个浮动框为止，<strong>脱离文档流，盒子塌陷，影响其他元素排版</strong></p><h5 id="2-html语义化是什么？"><a href="#2-html语义化是什么？" class="headerlink" title="2.html语义化是什么？"></a>2.html语义化是什么？</h5><ol><li>有利于SEO，搜索引擎根据标签确定上下文和各个关键字的权重。</li><li>利于用户阅读，样式文件未加载时页面结构清晰。</li><li>利于屏幕阅读器解析，如盲人阅读器会根据语义渲染网页。</li><li>利于开发和维护，代码更具可读性、更易于维护。</li></ol><h5 id="3-说一说CSS尺寸设置的单位"><a href="#3-说一说CSS尺寸设置的单位" class="headerlink" title="3.说一说CSS尺寸设置的单位"></a>3.说一说CSS尺寸设置的单位</h5><p>1.px 绝对像素</p><p>2.rem 相对于根元素像素，</p><p>3.em 相对于父元素像素</p><p>4.vw 视口宽度</p><p>5.vh 视口高度</p><h5 id="4-过渡transition有哪些属性"><a href="#4-过渡transition有哪些属性" class="headerlink" title="4.过渡transition有哪些属性"></a>4.过渡transition有哪些属性</h5><p>transition-property ：规定设置过渡效果的css属性名称，常用值 “all”全部css属性进行动画效果添加<br>transition-duration ：规定完成过渡效果需要多少秒或毫秒<br>transition-timing-function ：指定过渡函数，规定速度效果的速度曲线 常用值：关键字描述：linear ease-in ease-in-out<br>transition-delay ：指定开始出现的延迟时间</p><h5 id="5-css3新特性"><a href="#5-css3新特性" class="headerlink" title="5.css3新特性"></a>5.css3新特性</h5><p>圆角 （border-radius:8px）</p><p>文字特效 （text-shadow）</p><p>文字渲染 （Text-decoration）</p><p>box-shadow</p><p>线性渐变 （gradient）</p><p>转换 （transform）</p><p>transition</p><p>animation动画</p><p>增加了旋转,缩放,定位,倾斜,动画,多背景</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 面试 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h5 id="1-说一下http的请求方法"><a href="#1-说一下http的请求方法" class="headerlink" title="1.说一下http的请求方法"></a>1.说一下http的请求方法</h5><p>总共有8种，</p><p>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。<br>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法</p><p><strong>最常用的四种请求方法：GET, POST, PUT, DELETE</strong></p><p>1、get请求：<br>get：可以理解 为 取 的意思，对应select操作<br>用来获取数据的，只是用来查询数据，不对服务器的数据做任何的修改，新增，删除等操作。<br>说明：<br>get请求会把请求的参数附加在URL后面，这样是不安全的，在处理敏感数据时不用，或者参数做加密处理。<br>get请求其实本身HTTP协议并没有限制它的URL大小，但是不同的浏览器对其有不同的大小长度限制<br>2.post请求</p><p>数据发送到服务器以创建或更新资源，侧重于更新数据，对应update操作<br>说明：<br>post请求的请求参数都是请求body中</p><p>3、put请求：</p><p>put：可以理解为 放 的意思</p><p>4、delete请求：</p><p>delete：字面意思删除，即删除数据，对应delete操作<br>用来删除指定的资源，它会删除URI给出的目标资源的所有当前内容数据发送到服务器以创建或更新资源，侧重于创建数据，对应insert操作</p><h5 id="2-get和post区别"><a href="#2-get和post区别" class="headerlink" title="2.get和post区别"></a>2.get和post区别</h5><p>get和post本质上都是一样的，都是http请求的基本方法</p><p>1.主要的区别在于：</p><p>GET 就发送了一个TCP数据包给服务器而POST发送了两次TCP数据包给服务器</p><p>2.GET 是将数据中的hearder 和 data 一起发送给服务端，返回200code；</p><p>POST 是先将hearder发给服务器返回100continue，再发送data给到服务器，返回200</p><p>3.：GET请求在浏览器刷新或者回退的时候是无害的。POST的话数据会被重新提交。</p><p>4.可见性 参数在URL用户可以看见，POST的参数在REQUSET BODY中不会被用户看见</p><p>5.安全性 GET相对不安全 POST相对安全些</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023，写给自己大学的一篇文章</title>
      <link href="/2023-university/"/>
      <url>/2023-university/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>2023，写给自己的一篇文章</p><p>emmm,还没开始写，下面用AI占个位吧</p><p>1.越想逃避宿命，越会在半道上与宿命撞个正着。</p><p>2.你的思绪就像这池水，朋友，稍有外界触动就很难清澈明朗，可如果让它静下来，答案顿时变得清晰了。</p><p>3.我告诉你什么事最可悲，你遇见一个人，犯了一个错，你想弥补想还清，到最后才发现你根本无力回天，犯下的罪过永远无法弥补。</p><p>4.人心中的成见是一座大山，任你怎么努力都休想搬动。一生中能改变命运的机会可不多呀。</p><p>5.我想忘掉一些事情，可怎么也忘不了。忘不了，就别忘了，真正的忘记是不用努力的。</p><p>6.也许你的故事并不是从快乐开始的，可这不能决定你的一生。你想要变成什么样子，全看你自己的选择。</p><p>7.这短短的一生我们最终都会逝去，你不妨大胆一些，爱一个人，攀一座山，追一个梦。</p><p>8.Yesterday been history，tomorrow to be mystery，today is gift.That’s why it is called present。你患得患失，太在意从前，又太担心将来，有句话说得好，昨天是段历史，明天是个迷团，而今天是天赐的礼物，像珍惜礼物那样珍惜今天。</p><p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer day1 栈与队列（简单）</title>
      <link href="/coding-train/hot-100/day1/"/>
      <url>/coding-train/hot-100/day1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>day1题目：<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMveW9uZy1saWFuZy1nZS16aGFuLXNoaS14aWFuLWR1aS1saWUtbGNvZi8=">剑指 Offer 09. 用两个栈实现队列</span>、<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmFvLWhhbi1taW5oYW4tc2h1LWRlLXpoYW4tbGNvZi8=">剑指 Offer 30. 包含min函数的栈</span></p><p>知识点：栈、队列、设计，难度为简单、简单</p><p>学习计划链接：<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy">「剑指 Offer」 - 学习计划</span></p><table><thead><tr><th>题目</th><th>知识点</th><th>难度</th></tr></thead><tbody><tr><td><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMveW9uZy1saWFuZy1nZS16aGFuLXNoaS14aWFuLWR1aS1saWUtbGNvZi8=">剑指 Offer 09. 用两个栈实现队列</span></td><td>栈、设计、队列</td><td>简单</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmFvLWhhbi1taW5oYW4tc2h1LWRlLXpoYW4tbGNvZi8=">剑指 Offer 30. 包含min函数的栈</span></td><td>栈、设计</td><td>简单</td></tr></tbody></table><h1 id="剑指-Offer-09-用两个栈实现队列"><a href="#剑指-Offer-09-用两个栈实现队列" class="headerlink" title="剑指 Offer 09. 用两个栈实现队列"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMveW9uZy1saWFuZy1nZS16aGFuLXNoaS14aWFuLWR1aS1saWUtbGNvZi8=">剑指 Offer 09. 用两个栈实现队列</span></h1><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 <code>appendTail</code> 和 <code>deleteHead</code> ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，<code>deleteHead</code> 操作返回 -1 )</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;CQueue&quot;,&quot;appendTail&quot;,&quot;deleteHead&quot;,&quot;deleteHead&quot;]</span><br><span class="line">[[],[3],[],[]]</span><br><span class="line">输出： [null,null,3,-1]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;CQueue&quot;,&quot;deleteHead&quot;,&quot;appendTail&quot;,&quot;appendTail&quot;,&quot;deleteHead&quot;,&quot;deleteHead&quot;]</span><br><span class="line">[[],[],[5],[2],[],[]]</span><br><span class="line">输出： [null,-1,null,null,5,2]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= values &lt;= 10000</code></li><li><code>最多会对 appendTail、deleteHead 进行 10000 次调用</code></li></ul><h2 id="思路及代码"><a href="#思路及代码" class="headerlink" title="思路及代码"></a>思路及代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @algorithm @lc id=100273 lang=javascript </span></span><br><span class="line"><span class="comment">// @title yong-liang-ge-zhan-shi-xian-dui-lie-lcof</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">CQueue</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">s1</span> = []        <span class="comment">// 入队</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">s2</span> = []        <span class="comment">// 出队</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">value</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">CQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">appendTail</span> = <span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">s1</span>.<span class="title function_">push</span>(value)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">CQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">deleteHead</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">s2</span>.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">s1</span>.<span class="property">length</span> &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">s2</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">s1</span>.<span class="title function_">pop</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">s2</span>.<span class="property">length</span> == <span class="number">0</span> ? -<span class="number">1</span> : <span class="variable language_">this</span>.<span class="property">s2</span>.<span class="title function_">pop</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">s2</span>.<span class="title function_">pop</span>()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your CQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new CQueue()</span></span><br><span class="line"><span class="comment"> * obj.appendTail(value)</span></span><br><span class="line"><span class="comment"> * var param_2 = obj.deleteHead()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"> <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">CQueue</span>()</span><br><span class="line"> obj.<span class="title function_">appendTail</span>(<span class="number">3</span>)</span><br><span class="line"> obj.<span class="title function_">appendTail</span>(<span class="number">4</span>)</span><br><span class="line"> obj.<span class="title function_">appendTail</span>(<span class="number">7</span>)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">deleteHead</span>())</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">deleteHead</span>())</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">deleteHead</span>())</span><br></pre></td></tr></table></figure><h1 id="剑指-Offer-30-包含min函数的栈"><a href="#剑指-Offer-30-包含min函数的栈" class="headerlink" title="剑指 Offer 30. 包含min函数的栈"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmFvLWhhbi1taW5oYW4tc2h1LWRlLXpoYW4tbGNvZi8=">剑指 Offer 30. 包含min函数的栈</span></h1><p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</p><p><strong>示例:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MinStack minStack = new MinStack();</span><br><span class="line">minStack.push(-2);</span><br><span class="line">minStack.push(0);</span><br><span class="line">minStack.push(-3);</span><br><span class="line">minStack.min();   --&gt; 返回 -3.</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();      --&gt; 返回 0.</span><br><span class="line">minStack.min();   --&gt; 返回 -2.</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li>各函数的调用总次数不超过 20000 次</li></ol><p>注意：本题与主站 155 题相同：<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWluLXN0YWNrLw==">https://leetcode-cn.com/problems/min-stack/</span></p><h2 id="思路及代码-1"><a href="#思路及代码-1" class="headerlink" title="思路及代码"></a>思路及代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @algorithm @lc id=100302 lang=javascript </span></span><br><span class="line"><span class="comment">// @title bao-han-minhan-shu-de-zhan-lcof</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * initialize your data structure here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MinStack</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">s</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mins</span> = []</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">x</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MinStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">s</span>.<span class="title function_">push</span>(x)</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">mins</span>.<span class="property">length</span> == <span class="number">0</span> || x &lt;= <span class="variable language_">this</span>.<span class="property">mins</span>[<span class="variable language_">this</span>.<span class="property">mins</span>.<span class="property">length</span> - <span class="number">1</span>])   <span class="comment">// push的元素小于当前元素，将其放入mins</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">mins</span>.<span class="title function_">push</span>(x)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="title class_">MinStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pop</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="variable language_">this</span>.<span class="property">s</span>.<span class="title function_">pop</span>()</span><br><span class="line">    <span class="keyword">if</span>(x === <span class="variable language_">this</span>.<span class="property">mins</span>[<span class="variable language_">this</span>.<span class="property">mins</span>.<span class="property">length</span> - <span class="number">1</span>]) <span class="comment">// 如果pop的元素是mins的最后一个元素，则mins也要pop</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">mins</span>.<span class="title function_">pop</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MinStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">top</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">s</span>[<span class="variable language_">this</span>.<span class="property">s</span>.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="title class_">MinStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">min</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">mins</span>[<span class="variable language_">this</span>.<span class="property">mins</span>.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new MinStack()</span></span><br><span class="line"><span class="comment"> * obj.push(x)</span></span><br><span class="line"><span class="comment"> * obj.pop()</span></span><br><span class="line"><span class="comment"> * var param_3 = obj.top()</span></span><br><span class="line"><span class="comment"> * var param_4 = obj.min()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">MinStack</span>()</span><br><span class="line"> obj.<span class="title function_">push</span>(-<span class="number">2</span>)</span><br><span class="line"> obj.<span class="title function_">push</span>(<span class="number">0</span>)</span><br><span class="line"> obj.<span class="title function_">push</span>(-<span class="number">3</span>)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">min</span>())     <span class="comment">// -3</span></span><br><span class="line"> obj.<span class="title function_">pop</span>()</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">top</span>())     <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">min</span>())      <span class="comment">// -2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题目记录 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
