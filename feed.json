{
    "version": "https://jsonfeed.org/version/1",
    "title": "刘欢の博客",
    "subtitle": "整这么花，你不要命了！",
    "icon": "http://www.liuhuanblog.top/images/favicon.ico",
    "description": "东偶已逝 桑榆非晚",
    "home_page_url": "http://www.liuhuanblog.top",
    "items": [
        {
            "id": "http://www.liuhuanblog.top/vue3+ts%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/",
            "url": "http://www.liuhuanblog.top/vue3+ts%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/",
            "title": "vue3+ts中遇到的问题",
            "date_published": "2023-08-28T08:12:41.907Z",
            "content_html": "<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n<h5 id=\"vue3ts-在vscode中引用路径时一直提示爆红\"><a class=\"anchor\" href=\"#vue3ts-在vscode中引用路径时一直提示爆红\">#</a> vue3+ts 在 vscode 中引用路径时一直提示爆红</h5>\n<p>意思是说找不到对应的模块 “@/views/xxx.vue” 或其相应的类型声明</p>\n<p>1. 确保你的 tsconfig.json 文件中的 compilerOptions 部分包含了正确的路径映射设置。例如：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>json</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token string-property property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string-property property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string-property property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token string-property property\">\"@/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/*\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>2. 确保你的 vue.config.js 文件中的 configureWebpack 部分包含了正确的别名设置。例如：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>javascript</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token literal-property property\">configureWebpack</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token literal-property property\">alias</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string-property property\">'@'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>3. 确保你的 @/pages/hospital/index.vue 文件实际上存在于 src/pages/hospital/index.vue 路径下，并且文件名大小写匹配。</p>\n<p>4. 最后，也是我遇到的原因  因为 ts 只能解析 .ts 文件，无法解析 .vue 文件 所以导致引用 .vue 文件报错<br />\n解决方法很简单，一开始的时候 env.d.ts 是空文件，我们可以在项目的 env.d.ts 中引入如下代码：<br />\ndeclare module '*.vue' {<br />\nimport { DefineComponent } from &quot;vue&quot;<br />\nconst component: DefineComponent&lt;{}, {}, any&gt;<br />\nexport default component<br />\n}</p>\n",
            "tags": [
                "vue",
                "typescipt",
                "vue",
                "typescipt",
                "疑难杂症"
            ]
        },
        {
            "id": "http://www.liuhuanblog.top/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "url": "http://www.liuhuanblog.top/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "title": "git常用命令",
            "date_published": "2023-06-16T08:38:23.420Z",
            "content_html": "<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n<h5 id=\"第一次建立仓库时git操作\"><a class=\"anchor\" href=\"#第一次建立仓库时git操作\">#</a> 第一次建立仓库时 git 操作</h5>\n<figure class=\"highlight git\"><figcaption data-lang=\"git\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>echo <span class=\"token string\">\"# 147cai\"</span> >> README.md</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git init</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>git add README.md</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>git commit -m <span class=\"token string\">\"first commit\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>git branch -M main</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>git remote add origin git@github.com:147cai/147cai.git</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>git push -u origin main</pre></td></tr></table></figure><p>配置正常，只需提交代码 git 操作</p>\n<pre><code>git stash save 'first'\ngit stash pop 0\ngit pull\n解决文件冲突\ngit add ./\ngit status\ngit commit -m &quot;图标优化代码提交v-1.0.1&quot;\ngit push origin main \ngit log\n记录commit号以及提交标注\n</code></pre>\n<p>将代码提交到其他分支上</p>\n<pre><code>git branch 查看分支\ngit branch -a 查看所有远程仓库\ngit branch 本地自定义仓库名称 origin/远程仓库   创建本地仓库链接远程分支/R1.8.3z.nsp.20210115\ngit branch R3.1.0.release origin/R3.1.0.release   \ngit checkout &quot;本地分支名称&quot;     切换分支\ngit checkout R3.1.0.release\ngit cherry-pick fad28fd284d95ecb6702d0179e5ee5577b9e1aa5\n</code></pre>\n<p>![image-20230404091816652](D:\\ 桌面 \\ 暑假 \\abt - 实习 \\git\\git 常用命令 \\git 命令.assets\\image-20230404091816652.png)</p>\n",
            "tags": [
                "笔记",
                "git，tool",
                "git",
                "tool"
            ]
        },
        {
            "id": "http://www.liuhuanblog.top/mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "url": "http://www.liuhuanblog.top/mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "title": "mysql常用命令",
            "date_published": "2023-06-16T08:25:17.197Z",
            "content_html": "<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n<h5 id=\"mysql常用命令记录\"><a class=\"anchor\" href=\"#mysql常用命令记录\">#</a> mysql 常用命令记录</h5>\n<p>在学习 node 建立后端的过程中，发现之前学的 mysql 数据库忘记的差不多了，现做个记录</p>\n<ol>\n<li>基础命令<br />\n默认端口号：3306<br />\n 查看服务器版本：select version (); 或者 cmd 命令 mysql -verison<br />\n 登录数据库：mysql -uroot -p<br />\n 退出数据库：exit/quit<br />\n 查看当前系统下的数据库：show databases;<br />\n 创建数据库：create 库名；<br />\n 使用数据库：use 库名；<br />\n 查看表：show tables;<br />\n 建表：create table 表名 (字段名 + 空格 + 数据类型);<br />\n 查看表结构：desc 表名；<br />\n 添值：insert into 表名 (列名) values (值);<br />\n 查看表中所有数据：select * from 表名；<br />\n 查询建表时的结构：show create table 表名；<br />\n 删除字段中的值：delete from 表名 where 条件；<br />\n 删除表中的字段：delete from 表名 drop column 字段名；或者 alter table 表名 drop 字段名<br />\n删除表：drop table 表名；<br />\n 删除库：drop database 库名；<br />\n 主键约束：primary key<br />\n 唯一约束：unique<br />\n 非空约束：not null<br />\n 默认约束：default<br />\n 外键约束：foreign key（外键）references 主表（主键）<br />\n查看别的数据库的表格：show tables from 表名；</li>\n<li>where 条件查询<br />\n精确查询：=、!=、&gt;、&lt;、&gt;=、&lt;=<br />\n 模糊查询：like（像）、not like（不像）<br />\n通配符：%：任意字符、-：单个字符<br />\n逻辑运算符：<br />\nand：同时满足（优先级大于 or）<br />\nor：满足任意条件即可<br />\n区间运算：between a and b （闭区间）<br />\n集合运算：in 、not in<br />\n 非空运算：is null 、is not null</li>\n<li>针对表内数据的操作<br />\n增加：insert into 表名 (列名) values (值);<br />\n 删除：delete from 表名 where 条件；<br />\n 查看：select * from 表名 where 条件；<br />\n 修改：update 表名 set 字段 = 新值 where 条件；<br />\n 排序：order by 字段名；（asc 升序、desc 降序）<br />\n例：select * from 表名 order by 列名 1 asc , 列名 2 desc;<br />\n 聚合函数：<br />\nsum () 函数：求累加和<br />\n例：select sum (字段名) as ‘别名’/ 别名 from 表名；<br />\ncount () 函数：同级行数数量<br />\n（1）count (<em>)：表示计算表中总的行数，不管某列是否有数值或者是为空<br />\n select count (</em>) from 表名；<br />\n（2）count (字段名)：表示计算指定列下总的行数，计算或将忽略空值<br />\n select count (字段名) from 表名；<br />\navg () 函数：返回一个平均值函数<br />\n例：select avg (字段名) as 别名 from 表名；<br />\nmax () 函数：返回指定列中的最大值<br />\n select max (字段名) as 别名 from 表名；<br />\nmin () 函数： 返回最小值<br />\n例：select min (字段名) as 别名 from 表名；<br />\n 分组：<br />\ngroup by 字段 ：将查询结果按一列 / 多列的值分组，值相等为一列<br />\n having 字段：二次判断，用到聚合函数后，又需筛选条件时，having 和 group by 组合用<br />\n例：select 列名 1 ,count (列名 2) 别名 from 表名 group by 列名 1 having 别名 &gt;2;<br />\n 限制查询结果输出条数：limit 数字<br />\n传一个参数（输出前五条数据）<br />\nselect * from 表名 limit 5;<br />\n 传两个参数（输出 6-15）<br />\nselect * from 表名 limit 5,10;<br />\n:5：从 5 后开始，10：条数<br />\n修改表名：alter table 旧表名 rename 新表名；<br />\n 修改表中 id 字段为 sid：alter table 表名 change id sid char;<br />\n 去掉某列：alter table 表名 drop 列名；<br />\n 添加某列：alter table 表名 add 列名 char;<br />\n 修改列为字符型：alter table 表名 modify 列名 char (20);<br />\n 增加多列：alter table 表名 add (xh int (4),zc char (8),ads char (50),);<br />\n 删除多列：alter table 表名 drop xh,zc,ads;<br />\n 添加一个字段设主键约束：alter table 表名 add id sm unsigned primary key auto_increment;<br />\n 关联查询 - 等值查询：select * from 表名 where <span class=\"exturl\" data-url=\"aHR0cDovL2EuaWQ9Yi5pZA==\">a.id=b.id</span> and 条件<br />\n内连接：select * from 表名 1 inner join 表名 2 on 表名 1.xh = 表名 2.xh where 条件；<br />\n 左连接：select * from 表名 1 left join 表名 2 on 表名 1.xh = 表名 2.xh where 条件；<br />\n 右连接：select * from 表名 1 right join 表名 2 on 表名 1.xh = 表名 2.xh where 条件；</li>\n<li>创建索引</li>\n</ol>\n<p>1. 要尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引<br />\n 2. 在经常需要进行检索的字段上创建索引，比如要按照表字段 username 进行检索<br />\n 3. 一个表的索引数最好不要超过 6 个，若太多则应考虑一些不常使用到的列上建的索引是否有必要<br />\n普通索引（INDEX）<br />\n这是最基本的索引，它没有任何限制，比如上文中为 title 字段创建的索引就是一个普通索引，MyIASM 中默认的 BTREE 类型的索引，也是我们大多数情况下用到的索引。<br />\n直接创建索引<br />\n CREATE INDEX index_name ON table (column (length));</p>\n<p>修改表结构的方式添加索引<br />\n ALTER TABLE table_name ADD INDEX index_name ON (column (length));</p>\n<p>创建表的时候同时创建索引<br />\n CREATE TABLE  <code>table</code>  (<br />\n <code>id</code>  int(11) NOT NULL AUTO_INCREMENT ,<br />\n <code>title</code>  char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL ,<br />\n <code>content</code>  text CHARACTER SET utf8 COLLATE utf8_general_ci NULL ,<br />\n <code>time</code>  int(10) NULL DEFAULT NULL ,<br />\nPRIMARY KEY ( <code>id</code> ), // 主键索引<br />\n INDEX index_name (title (length)) // 普通索引<br />\n);</p>\n<p>唯一索引（UNIQUE）<br />\n与普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须是唯一的，创建方法和普通索引类似。<br />\n创建唯一索引<br />\n CREATE UNIQUE INDEX index_name ON table (column (length));</p>\n<p>修改表结构<br />\n ALTER TABLE table_name ADD UNIQUE INDEX index_name ON (column (length));</p>\n<p>创建表时同时创建索引<br />\n CREATE TABLE  <code>table</code>  (<br />\n <code>id</code>  int(11) NOT NULL AUTO_INCREMENT ,<br />\n <code>title</code>  char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL ,<br />\n <code>content</code>  text CHARACTER SET utf8 COLLATE utf8_general_ci NULL ,<br />\n <code>time</code>  int(10) NULL DEFAULT NULL ,<br />\nPRIMARY KEY ( <code>id</code> ),<br />\nUNIQUE indexName (title(length))<br />\n);</p>\n<pre><code>多列索引\n语句一般都有比较多的限制条件，所以为了进一步榨取MySQL的效率，就要考虑建立组合索引。例如上表中针对title和time建立一个组合\nALTER TABLE article ADD INDEX index_titme_time (title(50),time(10));\n\nALTER TABLE `table_name` ADD INDEX index_name ( `column1`, `column2`, `column3` );\n</code></pre>\n<p>全文索引（FULLTEXT）<br />\nALTER TABLE  <code>table_name</code>  ADD FULLTEXT (  <code>column</code> );</p>\n<p>主键索引（PRIMARY KEY）<br />\nALTER TABLE  <code>table_name</code>  ADD PRIMARY KEY (  <code>column</code>  );</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "笔记",
                "mysql，tool",
                "tool",
                "mysql"
            ]
        },
        {
            "id": "http://www.liuhuanblog.top/node%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98/",
            "url": "http://www.liuhuanblog.top/node%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98/",
            "title": "node版本问题",
            "date_published": "2023-06-16T08:24:55.016Z",
            "content_html": "<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n<h5 id=\"今天在运行网上的一个项目时又一次遇到了node版本过高导致无法npm-install问题因此做个记录\"><a class=\"anchor\" href=\"#今天在运行网上的一个项目时又一次遇到了node版本过高导致无法npm-install问题因此做个记录\">#</a> 今天在运行网上的一个项目时，又一次遇到了 node 版本过高导致无法 npm install 问题，因此做个记录</h5>\n<p>nvm 是一个 Node.js 版本管理器 ，为了解决 Node 各种版本存在不兼容问题，Nvm 其实是让你在同一台机器上根据需要，安装 或 切换项目所对应的 Node 版本来适配项目。</p>\n<p>nvm 安装等可以自行百度</p>\n<p>命令\t说明<br />\n nvm version\t查看 nvm 版本<br />\n nvm ls\t查看所有已经安装的 Nodejs 版本<br />\n nvm list installed\t查看所有已经安装的 Nodejs 版本<br />\n nvm ls available\t查看运程线上所有版本 (列出所有可以安装的 node 版本号)<br />\n nvm root\t查看 nvm 安装路径<br />\n nvm arch\t查看节点是否以 32 位或 64 位模式运行<br />\n nvm current\t查看当前 node 版本<br />\n nvm proxy\t查看设置与代理</p>\n<p>安装不同 node 版本：</p>\n<table>\n<thead>\n<tr>\n<th>nvm install latest</th>\n<th>安装最新稳定版 Nodejs</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>nvm install 12.18.0</td>\n<td>安装指定版本</td>\n</tr>\n<tr>\n<td>nvm uninstall 12.18.0</td>\n<td>卸载指定 12.18.0 版本</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>nvm use 版本号</td>\n<td>切换版本（这个是全局的）</td>\n</tr>\n<tr>\n<td>---------------</td>\n<td>------------------------</td>\n</tr>\n<tr>\n<td>nvm use 12.18.0</td>\n<td>切换到 2.18.0 版本</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "笔记",
                "node",
                "tool",
                "node"
            ]
        },
        {
            "id": "http://www.liuhuanblog.top/Vue/",
            "url": "http://www.liuhuanblog.top/Vue/",
            "title": "Vue",
            "date_published": "2023-06-02T07:43:40.090Z",
            "content_html": "<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n<h5 id=\"1说一说对vue的理解\"><a class=\"anchor\" href=\"#1说一说对vue的理解\">#</a> 1. 说一说对 vue 的理解？</h5>\n<p>1、MVVM 是核心特性之一，其中 M 表示 Model 数据，V 表示 View 视图，VM 表示 ViewMode 视图模型层，主要用来连接 Model 和 View</p>\n<p>2、组件化开发思想：在 vue 中可以把图形和非图形的各种逻辑抽象为一个统一得到概念来实现开发模式，每个.vue 文件就代表着一个组件</p>\n<p>组件化的优势:</p>\n<p>降低了耦合度，可以通过组件快速完成需求</p>\n<p>调试方便，页面上很多地方使用同一个组件，在出问题时只需要调试这个地方就行了</p>\n<p>提高了可维护性，组件的维护成本低</p>\n<p>3、vue 有着特色的指令系统</p>\n<p>比如条件渲染 v-if，列表渲染 v-for，属性绑定 v-bind，双向绑定 v-model，事件绑定 v-on 等等，在没有这些指令之前，我们获取需要通过操作 dom 的形式进行一些操作，比较麻烦</p>\n<h5 id=\"2谈谈对生命周期的理解\"><a class=\"anchor\" href=\"#2谈谈对生命周期的理解\">#</a> 2.<strong> 谈谈对生命周期的理解</strong></h5>\n<p>1、beforeCreate 组件实例被创建之前</p>\n<ul>\n<li>初始化 vue 实例，进行数据观测</li>\n</ul>\n<p>2、created 组件实例已经被完全创建</p>\n<ul>\n<li>完成数据观测，属性与方法的运算，watch、event 事件回调的配置</li>\n<li>可调用 methods 中的方法，访问和修改 data 数据触发响应式渲染 dom，可通过 computed 和 watch 完成数据计算</li>\n<li>此时 vm.$el 并没有被创建</li>\n</ul>\n<p>3、beforeMount 组件挂载之前</p>\n<ul>\n<li>在此阶段可获取到 vm.el</li>\n<li>此阶段 vm.el 虽已完成 DOM 初始化，但并未挂载在 el 选项上</li>\n</ul>\n<p>4、mounted 组件挂载到实例上去之后</p>\n<ul>\n<li>vm.el 已完成 DOM 的挂载与渲染，此刻打印 vm.$el，发现之前的挂载点及内容已被替换成新的 DOM</li>\n</ul>\n<p>5、beforeupdated 组件更新之前</p>\n<ul>\n<li>更新的数据必须是被渲染在模板上的（el、template、render 之一）</li>\n<li>此时 view 层还未更新</li>\n<li>若在 beforeUpdate 中再次修改数据，不会再次触发更新方法</li>\n</ul>\n<p>6、updated 组件数据更新之后</p>\n<ul>\n<li>完成 view 层的更新</li>\n<li>若在 updated 中再次修改数据，会再次触发更新方法（beforeUpdate、updated）</li>\n</ul>\n<p>7、beforedestroy 组件实例被销毁之前</p>\n<ul>\n<li>实例被销毁前调用，此时实例属性与方法仍可访问</li>\n</ul>\n<p>8、destoryed 组件实例被销毁之后</p>\n<ul>\n<li>完全销毁一个实例。可清理它与其它实例的连接，解绑它的全部指令及事件监听器</li>\n<li>并不能清除 DOM，仅仅销毁实例</li>\n</ul>\n<p>9、activated，keepalive 缓存组件激活时</p>\n<p>10、deactivated，keepalive 缓存的组件停止调用时</p>\n<h5 id=\"3数据请求在created和mounted中的区别\"><a class=\"anchor\" href=\"#3数据请求在created和mounted中的区别\">#</a> 3.<strong> 数据请求在 created 和 mounted 中的区别</strong></h5>\n<p>1、created 的时候页面的 dom 还未生成，mounted 的时候页面 dom 已经生成了</p>\n<p>2、created 获取数据比 mounted 更早，两者的相同点：都能拿到实例对象的属性和方法。</p>\n<p>3、放在 mounted 中的请求有可能导致页面闪动 (因为 dom 已经生成了)</p>\n<h5 id=\"4vue里组件间通信的方式有哪些\"><a class=\"anchor\" href=\"#4vue里组件间通信的方式有哪些\">#</a> 4<strong>vue 里组件间通信的方式有哪些</strong></h5>\n<p>1、vuex 全局状态管理 (pinia)</p>\n<p>2、父组件通过标签进行值的传递，子组件通过 props 接收</p>\n<p>3、eventbus 来进行传递</p>\n<p>4、子组件通过 emit 来进行发布事件</p>\n<p>5、通过<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mtext>和</mtext></mrow><annotation encoding=\"application/x-tex\">parent和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mord cjk_fallback\">和</span></span></span></span> children 来进行传递</p>\n<p>6、通过 provide 和 inject 来进行注入</p>\n<p>7、通过 ref 进行传值</p>\n<p>8. 自定义事件</p>\n<p>9.pubsub-js</p>\n<p>10. 插槽</p>\n<p>11vuex</p>\n",
            "tags": [
                "笔记",
                "Vue",
                "Vue",
                "vite"
            ]
        },
        {
            "id": "http://www.liuhuanblog.top/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/",
            "url": "http://www.liuhuanblog.top/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/",
            "title": "浏览器性能优化",
            "date_published": "2023-06-02T07:43:40.087Z",
            "content_html": "<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n<h5 id=\"1html渲染过程详解\"><a class=\"anchor\" href=\"#1html渲染过程详解\">#</a> 1.html 渲染过程详解</h5>\n<p>用户输入 url 地址，浏览器根据域名寻找 IP 地址<br />\n浏览器向服务器发送 http 请求，如果服务器段返回以 301 之类的重定向，浏览器根据相应头中的 location 再次发送请求<br />\n服务器端接受请求，处理请求生成 html 代码，返回给浏览器，这时的 html 页面代码可能是经过压缩的<br />\n浏览器接收服务器响应结果，如果有压缩则首先进行解压处理，紧接着就是页面解析渲染</p>\n<p><strong>解析渲染该过程主要分为以下步骤：</strong></p>\n<ol>\n<li><strong>解析 HTML</strong></li>\n<li><strong>构建 DOM 树</strong></li>\n<li><strong>DOM 树与 CSS 样式进行附着构造呈现树</strong></li>\n<li><strong>布局</strong></li>\n<li><strong>绘制</strong></li>\n</ol>\n<h5 id=\"2一个页面从输入url到页面加载显示完成这个过程发生的事\"><a class=\"anchor\" href=\"#2一个页面从输入url到页面加载显示完成这个过程发生的事\">#</a> 2. 一个页面从输入 URL 到页面加载显示完成，这个过程发生的事。</h5>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poY2luaXQwL2FydGljbGUvZGV0YWlscy8xMDcyNTA2MTQvP29wc19yZXF1ZXN0X21pc2M9JmFtcDtyZXF1ZXN0X2lkPSZhbXA7Yml6X2lkPTEwMiZhbXA7dXRtX3Rlcm09JUU5JUExJUI1JUU5JTlEJUEyJUU2JUI4JUIyJUU2JTlGJTkzaHRtbCVFNyU5QSU4NCVFOCVCRiU4NyVFNyVBOCU4QiZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3NlYXJjaF9yZXN1bHQubm9uZS10YXNrLWJsb2ctMn5hbGx+c29iYWlkdXdlYn5kZWZhdWx0LTQtMTA3MjUwNjE0LjE0MiU1RXY3MyU1RWluc2VydF9kb3duMSwyMDElNUV2NCU1RWFkZF9hc2ssMjM5JTVFdjIlNUVpbnNlcnRfY2hhdGdwdCZhbXA7c3BtPTEwMTguMjIyNi4zMDAxLjQxODc=\">(112 条消息) HTML 页面渲染的过程_zhcinit0 的博客 - CSDN 博客_html 渲染页面的过程</span></p>\n<p>1. 浏览器查找域名获得对应 ip 地址</p>\n<p>2. 浏览器向 web 服务器发送一个 http 请求</p>\n<p>3. 服务器重定向</p>\n<p>4. 浏览器跟踪重定向地址，请求相应资源</p>\n<p>5. 服务器处理请求</p>\n<p>6. 服务器返回一个 http 响应</p>\n<p>7. 浏览器进行 html 的解析以及渲染绘制制图</p>\n",
            "tags": [
                "笔记",
                "性能优化",
                "性能优化"
            ]
        },
        {
            "id": "http://www.liuhuanblog.top/JavaScript/",
            "url": "http://www.liuhuanblog.top/JavaScript/",
            "title": "JavaScript",
            "date_published": "2023-06-02T07:43:40.083Z",
            "content_html": "<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n<h6 id=\"1什么是闭包\"><a class=\"anchor\" href=\"#1什么是闭包\">#</a> <strong>1. 什么是闭包？</strong></h6>\n<p>内层函数 + 引用的外层函数变量 = 闭包</p>\n<p>闭包的主要应用就是进行数据的私用化，减少全局变量</p>\n<p>闭包的内存泄露：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/147cai/blog-cdn/note/image-20230213220712311.png\" alt=\"image-20230213220712311\" /></p>\n<h6 id=\"2宏任务和微任务\"><a class=\"anchor\" href=\"#2宏任务和微任务\">#</a> <strong>2. 宏任务和微任务？</strong></h6>\n<ul>\n<li>\n<p>宏任务：setTimeout，setInterval，Ajax，DOM 事件</p>\n</li>\n<li>\n<p>微任务：Promise，process.nextTick</p>\n<p>宏任务在异步任务中不需要连贯执行，微任务在异步任务中需要连贯执行</p>\n</li>\n</ul>\n<p>微任务的执行时机要比宏任务早！（可以先记一哈，后面会继续说这点）</p>\n<p>Dom 事件不是异步操作，但是它依赖了 eventloop 机制，所以也归在这点里了</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 答案为： 100 400 300 200</span></pre></td></tr></table></figure><h6 id=\"3防抖和节流\"><a class=\"anchor\" href=\"#3防抖和节流\">#</a> 3. 防抖和节流</h6>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/147cai/blog-cdn/note/image-20230213224807631.png\" alt=\"image-20230213224807631\" /></p>\n<h6 id=\"4js函数的几种声明方式\"><a class=\"anchor\" href=\"#4js函数的几种声明方式\">#</a> 4.js 函数的几种声明方式</h6>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/147cai/blog-cdn/note/image-20230213225234423.png\" alt=\"image-20230213225234423\" /></p>\n<h6 id=\"5谈谈你对原型的理解\"><a class=\"anchor\" href=\"#5谈谈你对原型的理解\">#</a> 5. 谈谈你对原型的理解？</h6>\n<p>1、所有的引用类型（数组、函数、对象）可以自由扩展属性（除 null 以外）。</p>\n<p>2、所有的引用类型都有一个’_ _ proto_ _' 属性 (也叫隐式原型，它是一个普通的对象)。</p>\n<p>3、所有的函数都有一个’prototype’属性 (这也叫显式原型，它也是一个普通的对象)。</p>\n<p>4、所有引用类型，它的’_ _ proto_ _' 属性指向它的构造函数的’prototype’属性。</p>\n<p>5、当试图得到一个对象的属性时，如果这个对象本身不存在这个属性，那么就会去它的’_ _ proto_ _' 属性 (也就是它的构造函数的’prototype’属性) 中去寻找。</p>\n<h6 id=\"6箭头函数和普通函数的区别\"><a class=\"anchor\" href=\"#6箭头函数和普通函数的区别\">#</a> 6. 箭头函数和普通函数的区别？</h6>\n<p>1. 箭头函数比普通函数更简洁</p>\n<p>2. 箭头函数没有 this 指针</p>\n<p>3. 箭头函数继承的 this 指针永远不会改变，因此 call，apply,bind 等方法不能改变箭头函数中的</p>\n<p>this 指向</p>\n<p>4. 箭头函数不能作为构造函数使用</p>\n<p>由于箭头函数时没有自己的 this，且 this 指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用。</p>\n<p>5. 箭头函数没有自己的 arguments</p>\n<p>箭头函数没有自己的 arguments 对象。在箭头函数中访问 arguments 实际上获得的是它外层函数的 arguments 值。</p>\n<ol start=\"6\">\n<li>箭头函数没有 prototype</li>\n</ol>\n<h5 id=\"7说一说跨域是什么如何解决跨域问题\"><a class=\"anchor\" href=\"#7说一说跨域是什么如何解决跨域问题\">#</a> 7. 说一说跨域是什么，如何解决跨域问题？</h5>\n<p>跨域的概念：浏览器不能执行其它的网站的脚本，这由浏览器的同源策略造成的，也是浏览器施加安全的限制</p>\n<p>跨域解决方案： - jsonp - 前端 proxy 后端 cors - 线上 Nginx - websockt</p>\n<h5 id=\"8js类型\"><a class=\"anchor\" href=\"#8js类型\">#</a> 8.js 类型</h5>\n<p>7 种基本数据类型</p>\n<p>undefined</p>\n<p>null</p>\n<p>number</p>\n<p>string</p>\n<p>boolean</p>\n<p>symbol</p>\n<p>bigint</p>\n<p>3 种引用数据类型</p>\n<p>object</p>\n<p>function</p>\n<p>array</p>\n<h5 id=\"9数据类型的检查方式有那些\"><a class=\"anchor\" href=\"#9数据类型的检查方式有那些\">#</a> 9. 数据类型的检查方式有那些</h5>\n<p>1.typeof</p>\n<p>2.instanceof</p>\n<p>3.constructor</p>\n<p>4.object.prototype.toString.call()</p>\n<h5 id=\"10-es6新增了那些新语法\"><a class=\"anchor\" href=\"#10-es6新增了那些新语法\">#</a> 10 es6 新增了那些新语法</h5>\n<p>1.let const</p>\n<p>2. 解构赋值</p>\n<p>3. 模板字符串</p>\n<p>4.map set 数组新方法如 forEach find map () filter () Array.from ()</p>\n<p>5. 箭头函数</p>\n<p>6. 类</p>\n<p>7.promise 和 proxy</p>\n<p>8. 模块化</p>\n",
            "tags": [
                "笔记",
                "面试",
                "JavaScript",
                "JavaScript"
            ]
        },
        {
            "id": "http://www.liuhuanblog.top/HTML+CSS/",
            "url": "http://www.liuhuanblog.top/HTML+CSS/",
            "title": "HTML+CSS",
            "date_published": "2023-06-02T07:43:40.080Z",
            "content_html": "<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n<h5 id=\"1说一下浮动\"><a class=\"anchor\" href=\"#1说一下浮动\">#</a> 1. 说一下浮动？</h5>\n<p>浮动是脱离文档的普通流存在的（可以看作是漂浮在普通流上），它可以左右浮动，直到它的外边缘遇到包含框或者另一个浮动框为止，<strong>脱离文档流，盒子塌陷，影响其他元素排版</strong></p>\n<h5 id=\"2html语义化是什么\"><a class=\"anchor\" href=\"#2html语义化是什么\">#</a> 2.html 语义化是什么？</h5>\n<ol>\n<li>有利于 SEO，搜索引擎根据标签确定上下文和各个关键字的权重。</li>\n<li>利于用户阅读，样式文件未加载时页面结构清晰。</li>\n<li>利于屏幕阅读器解析，如盲人阅读器会根据语义渲染网页。</li>\n<li>利于开发和维护，代码更具可读性、更易于维护。</li>\n</ol>\n<h5 id=\"3说一说css尺寸设置的单位\"><a class=\"anchor\" href=\"#3说一说css尺寸设置的单位\">#</a> 3. 说一说 CSS 尺寸设置的单位</h5>\n<p>1.px 绝对像素</p>\n<p>2.rem 相对于根元素像素，</p>\n<p>3.em 相对于父元素像素</p>\n<p>4.vw 视口宽度</p>\n<p>5.vh 视口高度</p>\n<h5 id=\"4过渡transition有哪些属性\"><a class=\"anchor\" href=\"#4过渡transition有哪些属性\">#</a> 4. 过渡 transition 有哪些属性</h5>\n<p>transition-property ：规定设置过渡效果的 css 属性名称，常用值 “all” 全部 css 属性进行动画效果添加<br />\n transition-duration ：规定完成过渡效果需要多少秒或毫秒<br />\n transition-timing-function ：指定过渡函数，规定速度效果的速度曲线 常用值：关键字描述：linear ease-in ease-in-out<br />\ntransition-delay ：指定开始出现的延迟时间</p>\n<h5 id=\"5css3新特性\"><a class=\"anchor\" href=\"#5css3新特性\">#</a> 5.css3 新特性</h5>\n<p>圆角 （border-radius:8px）</p>\n<p>文字特效 （text-shadow）</p>\n<p>文字渲染 （Text-decoration）</p>\n<p>box-shadow</p>\n<p>线性渐变 （gradient）</p>\n<p>转换 （transform）</p>\n<p>transition</p>\n<p>animation 动画</p>\n<p>增加了旋转，缩放，定位，倾斜，动画，多背景</p>\n",
            "tags": [
                "笔记",
                "面试",
                "CSS",
                "HTML",
                "CSS"
            ]
        },
        {
            "id": "http://www.liuhuanblog.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",
            "url": "http://www.liuhuanblog.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",
            "title": "计算机网络",
            "date_published": "2023-06-02T07:43:40.076Z",
            "content_html": "<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n<h5 id=\"1说一下http的请求方法\"><a class=\"anchor\" href=\"#1说一下http的请求方法\">#</a> 1. 说一下 http 的请求方法</h5>\n<p>总共有 8 种，</p>\n<p>HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD 方法。<br />\nHTTP1.1 新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法</p>\n<p><strong>最常用的四种请求方法：GET, POST, PUT, DELETE</strong></p>\n<p>1、get 请求：<br />\nget：可以理解 为 取 的意思，对应 select 操作<br />\n用来获取数据的，只是用来查询数据，不对服务器的数据做任何的修改，新增，删除等操作。<br />\n说明：<br />\nget 请求会把请求的参数附加在 URL 后面，这样是不安全的，在处理敏感数据时不用，或者参数做加密处理。<br />\nget 请求其实本身 HTTP 协议并没有限制它的 URL 大小，但是不同的浏览器对其有不同的大小长度限制<br />\n 2.post 请求</p>\n<p>数据发送到服务器以创建或更新资源，侧重于更新数据，对应 update 操作<br />\n说明：<br />\npost 请求的请求参数都是请求 body 中</p>\n<p>3、put 请求：</p>\n<p>put：可以理解为 放 的意思</p>\n<p>4、delete 请求：</p>\n<p>delete：字面意思删除，即删除数据，对应 delete 操作<br />\n用来删除指定的资源，它会删除 URI 给出的目标资源的所有当前内容数据发送到服务器以创建或更新资源，侧重于创建数据，对应 insert 操作</p>\n<h5 id=\"2get和post区别\"><a class=\"anchor\" href=\"#2get和post区别\">#</a> 2.get 和 post 区别</h5>\n<p>get 和 post 本质上都是一样的，都是 http 请求的基本方法</p>\n<p>1. 主要的区别在于：</p>\n<p>GET 就发送了一个 TCP 数据包给服务器而 POST 发送了两次 TCP 数据包给服务器</p>\n<p>2.GET 是将数据中的 hearder 和 data 一起发送给服务端，返回 200code；</p>\n<p>POST 是先将 hearder 发给服务器返回 100continue，再发送 data 给到服务器，返回 200</p>\n<p>3.：GET 请求在浏览器刷新或者回退的时候是无害的。POST 的话数据会被重新提交。</p>\n<p>4. 可见性 参数在 URL 用户可以看见，POST 的参数在 REQUSET BODY 中不会被用户看见</p>\n<p>5. 安全性 GET 相对不安全 POST 相对安全些</p>\n",
            "tags": [
                "笔记",
                "面试",
                "http",
                "计算机网络"
            ]
        },
        {
            "id": "http://www.liuhuanblog.top/2023-university/",
            "url": "http://www.liuhuanblog.top/2023-university/",
            "title": "2023，写给自己大学的一篇文章",
            "date_published": "2022-04-21T18:02:14.000Z",
            "content_html": "<p>2023，写给自己的一篇文章</p>\n<p>展信舒颜，见字如面</p>\n<p>2023 年开始的时候，创建的博客，取了这个标题，因为有些时候挺想写点东西，单单为了缓解情绪，但是我挺懒的呀，有时候把那段想记录的时间点过了就懒写了，昨天依然如此（2024.1.8 晚）。睡了一觉，又感觉风轻云淡，但是人的记忆的有限的呀，人的思维是会变的呀，我想告诉一年后，还是三年后的我，现在的我是什么样子的。</p>\n<p>​\t\t\t昨天因为跟我姐思想上有一点冲突，她觉得我现在思想没有进取精神，没有勤奋，得过且过，这也确实是现在的我，我也不知道什么时候开始我对很多事看的很淡，没有一个青年人应该有的朝气，可能是那段实习结束？我姐对我是极好的，从我记事起，我们几乎没有矛盾，可能会少一点像其他姐弟之间的打闹，但是感情是不缺的，且更甚之，我们缺乏表达感情，只是心理明白，可能跟从小家庭氛围所影响，尤其这年，年中脑子不清醒，搞了点笨事，也是我姐帮我解决的，不然我都不敢想，会过的多难受，所以昨天聊天的时候我感觉她对我挺失望的，但是我又不好解释，这种思想上的差异（她觉得我现在正是努力的时候，应该每天都努力学习，以后有个好的生活，我觉得及时行乐，今朝有酒今朝醉，莫使金樽空对月），没有解释，只会越吵越难受。现在的我看得很开，我也觉得这其实是有点问题的。但是我有点不想改。大学是身体上最轻松，精神上最累的时候。我努力了很久，从初中到高中，那时候的我觉得，少年应当凌云志，莫负天生八尺躯，尤其是高中，我从压线进县里一所较好的高中的平行班，到考上一个一本，从班上 40 多名，走到班上前几，那个时候下课十分课除掉上厕所的两分钟，剩下的 8 分钟我可以写一篇英语阅读，或者可以写一个数学大题，亦或者看看物理大题，挤着时间学，晚上寝室不能开灯躲在被子里学这久上课没听的知识点，那时候甚至有一种幸福感，因为大家都学不了，都要在这个时间睡觉了，我可以偷偷学。那时候确实很累，我的底子太差了，村里的小学没有人教英语，我落后了整个学生时代，一直没花时间赶上来，可能就是一步落，步步落吧。村里的小学老师语文老师水平有限，除了识字没有学到其他的东西，我依稀记得初中每次默写古诗的时候不知道被打了多少板子，因为我很多字都不会写，很多简单的古诗都不会背。甚至读了两个一年级，任然不会拼音，到大学要用电脑键盘的尴尬促使我花了时间去学。但是还好，高中遇到了一个很有气质的语文老师，我并不清楚老师的年龄，好像是快做奶奶的人了，但是整个人很有气质，不是穿着，是那种由内而外的气质，谦谦君子，温温如玉，我觉得很有魅力的，我当时想着，如果我老了，也能这样负有这种气质力，可能我的人生过的应该挺满足吧。她让我喜欢上了语文。我学到了很多。不是课本上的，是获取知识上面的。依稀记得她告诉我们除了书上的语文是有限的，是来引导你以后读人生这本厚厚的语文书来作铺垫的。是的，从那以后我很在意生活中发生的一些小确幸，在此之前看见了不会注意的那种。那时候每次晚上从食堂出来的时候，我会看夕阳下的白云，那食堂跟教学楼长长的大道上的的白云有各种各样的形状，我之前都不会在意，因为之前我觉得与我无关，配上残阳如血的天空。也是高中时代精神的放松。我会在下晚自习的时候一个人慢慢的走回寝室，因为星星正亮闪闪的，等待着有人去欣赏它，有花堪折直须折，莫待无花空折枝。后来想，可能并不是那个时候星星好看，可能是我那天又收获了很多，又努力了一天，又解出来了一道想了很久都没解出来的数学题。印象最深的时候是我有一次花了两节自习课，在刚刚才高三，写出来了两道物理高考试卷的压轴题，那一天我都沉浸在开心之中。有开心，当然也有低迷，何况在高中这个最累的时候。我当时有个很好的缓解情绪的方法。是因为我姐初中的时候给了我两本书，一本是《平凡的世界》一本叫《人生》。两本我都看了很多遍。不过我更喜欢《平凡的世界》，放在我枕头底下，躲着被子里开台灯看孙少平顽强的人生，就会觉得自己这种小小的困难不算什么了，那个时候什么深夜人静，我大脑完全放空，完全沉迷其中。平凡并不意味着平庸，每个人的生命都有自己的闪光点。生活中真正的勇士向来默默无闻，喧哗不止的永远是自视高贵的一群。可能一个月才能读完一遍，但是每次读都有不同的感受。开始我并不理解，为什么要写一个这么普通的人，开始他是一个连丙等餐都吃不起学生，每天都饿的发昏，到书的最后一页他是一个煤矿工人，没有阶级的跳跃，每天工作不仅累还有生命危险。在地下暗无天日煤矿还容易坍塌。人是活在瞬间里的。也许人生仅有那么一两个辉煌的瞬间 —— 甚至一生都可能在平淡无奇中度过…… 偏题了，不知怎么的，就谈了这么多之前的。都说无能的人才会经常谈自己的之前，害害，不知道后面的你看见会是怎么样，可能觉得尴尬又觉得有意思吧。应该，我性格就是这样吧，那个时候我想的是，好好学习，考上一个好大学，以后就能过上一个好的生活，我当时对于一个好的生活没有一个定义，但是对于那种，春看百花，秋对月，夏赏清荷，冬听雪的生活状态颇有向往，有自己的闲情逸致，有自己的生活，不乱于心，不困于情。所以还比较努力，有激情。高考也确实达到了自己的目标，那个时候真的有种春风得意马蹄疾，一看看尽长安花感受，家里也都很开心，就像我爸妈以为我考不上大学就去继承他们的手艺谋生，他们没想到我考的这么好，因为他们也没读过书，只能在生活上给予尽可能的帮助，学习上大部分都是不闻不问，因为也不懂。</p>\n<p>​\t\t理想与现实终究是有差距的。后面上了大学。大一的时候我脑子里还记得高中老师说的，考上大学就好了，就轻松了。虽然知道，但是还有高中勤奋的习惯，也让我忙一些杂七杂八的东西，但是也没忙出什么明白，还很空虚。之后明白了大学跟高中是有差距的，不仅仅需要学习，还有人脉，方向，信息。有人告诉跟没人告诉你是差距很大的，选对一个方向也是很重要的，有句话叫做站在风口上，猪都能飞起来。计算机确实还算比较好的方向，但是有那些细化的方向，需要学什么，我到大二才明白，不过也不晚。但是，不知道怎么，我变的特别快节奏，学什么都追求速度，不看成效。不能耐心的去做一件事。不要因为一路的风风雨雨，就忘记了天边的彩虹，不要因为一路的行色匆匆，就忘记了路边的风景。对于一些我自己认为不重要的事，还有拖延症。可能是大一玩多了吧，生于忧患，死于安乐，温柔乡难逃出来。过久了舒服的日子，谁又想跳出来，温水中的青蛙可能知道会死，但是舒服的环境已经难有很强的弹跳能力了。大学过的很快，转眼间，就大四了，前面说过，我觉得人是活一个瞬间的，因为大学的时候没有很多美好的瞬间，没有多少记忆，所有转眼间就过去了。每天因为理想与现实的差距很焦虑，精神上想改变，却好难。大学确实有很多遗憾，有过很多次想法却一次都没有行动，我羡慕操场上的热闹，羡慕别人能勇敢的去唱一首歌，去跳一支舞，即使我不会；我羡慕没有好好谈一次恋爱，有机会却没有珍惜，没有胆子跟勇气；我羡慕没有跟队友因为某个比赛，某个目标，废寝忘食的去完成。我的大学是平凡又平庸。今天秋招之前，我已经有摆烂的心态了，经常无事就打游戏，看小说，沉迷于这些之中就不会去想一些其他的烦恼，但是每次玩完又会觉得更加空虚，精神内耗。12 月份初，我已经不想那些烦心的事。弃我去者，昨日之事不可留，乱我心者，今日之事多烦忧。每天开开心心的过，打打游戏，打打羽毛球。打游戏也单纯是喜欢玩，玩的开心，而不是麻痹自己，逃避生活。这便是题初，我跟我姐姐的矛盾，她想让我考公务员，我考，但是我不想去把时间都花在这个上面，我跟几百号人去争那一两个名额。我不想过的这么累，我觉得得之我幸，弃之我名，这就是我现在的心态，不急。但是终究得面对，我能够明白，现在的努力得到的成效是双倍的甚至是好几倍的，因为我还是个学生身份，公司，国家是对学生有优待的，我也知道等我毕业了，工作了，之后再去考公，跳槽，努力学习，得到的效果是远远比不上现在的。我已经成年了，二十又一，在古代这个年纪已经加冠了，甚至要对自己的家庭负责了，我有成熟的思考能力，我只是不想过的很累。可能我确实是错的，明明有事半功倍的机会却不会好好珍惜。诗与远方都是建立在经济的基础之上。我以前在想，人的一生总要有点东西，要么有钱可以改善自己的生活以及家庭，独善其身，要么能为社会作点贡献，精神上有所收获。有时候看见学校的援建大西北计划的横幅，到基层，到祖国最需要的地方去，我有时候会有一种报名的冲动，至少我能有所作用。</p>\n<p>​\t\t\t说多了，写的很乱，不过我觉得你应该也能看懂，比较你了解之前的你，我会把这个放在博客上，好保存，可能写的乱了，朋友你看的懵懵懂懂的，其实没什么，我心态一直很好，只不过现在丢失了一点奋斗精神，寒假回去，学好，玩好，一年没回老家了，明天就回去了，挺想我奶奶的，今年外公突然去世，让我真真切切的感觉到，明天跟意外不知道谁会先来，树欲静而风不止，子欲养而亲不待。除此之外，还想提提一路上遇到很多优秀的人跟陪我良久的人，我的学生时代快结束了，我人生的 1/4，相互帮助相互进步，初中一直睡同一张床上的人那个人依然未变，我们的感情不会六年的相处没有因为四年未见而变的陌生，我们大学不在同一个城市所以一直未见，这次寒假见见面吧。还有一个高中一起努力学习的挚友，上个月相见时四年的差距已经显示出来了，他保研了一所很好的大学的研究生，并且因为自己的实践能力很强已经在接单养活自己了。努力的人运气都不会差，不过上次一起出去玩并不能像之前高中那样相处了，四年人都会变的。可能瞧不上我了吧，亦或者只是刚刚保研还是处于飘飘然的状态，本质未变。不过我感觉已经有一点点隔阂了，尽量少见面吧，保留心中那份好的记忆。还有两个大学的一起打比赛的队友，比赛作为一个纽带将我们连接，平时分享了很多，互相帮助。望友谊长存。</p>\n<p>​\t\t\t即使最平凡的人也要为他生活的那个世界而奋斗。</p>\n<p>越想逃避宿命，越会在半道上与宿命撞个正着。</p>\n<p>你的思绪就像这池水，朋友，稍有外界触动就很难清澈明朗，可如果让它静下来，答案顿时变得清晰了。</p>\n<p>我告诉你什么事最可悲，你遇见一个人，犯了一个错，你想弥补想还清，到最后才发现你根本无力回天，犯下的罪过永远无法弥补。</p>\n<p>人心中的成见是一座大山，任你怎么努力都休想搬动。一生中能改变命运的机会可不多。</p>\n<p>我想忘掉一些事情，可怎么也忘不了。忘不了，就别忘了，真正的忘记是不用努力的。</p>\n<p>也许你的故事并不是从快乐开始的，可这不能决定你的一生。你想要变成什么样子，全看你自己的选择。</p>\n<p>这短短的一生我们最终都会逝去，你不妨大胆一些，爱一个人，攀一座山，追一个梦。</p>\n<p>Yesterday been history，tomorrow to be mystery，today is gift.That's why it is called present。你患得患失，太在意从前，又太担心将来，有句话说得好，昨天是段历史，明天是个迷团，而今天是天赐的礼物，像珍惜礼物那样珍惜今天。</p>\n<p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p>\n",
            "tags": [
                "随笔",
                "总结"
            ]
        },
        {
            "id": "http://www.liuhuanblog.top/coding-train/hot-100/day1/",
            "url": "http://www.liuhuanblog.top/coding-train/hot-100/day1/",
            "title": "剑指offer day1 栈与队列（简单）",
            "date_published": "2022-03-30T08:00:52.000Z",
            "content_html": "<p>day1 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMveW9uZy1saWFuZy1nZS16aGFuLXNoaS14aWFuLWR1aS1saWUtbGNvZi8=\">剑指 Offer 09. 用两个栈实现队列</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmFvLWhhbi1taW5oYW4tc2h1LWRlLXpoYW4tbGNvZi8=\">剑指 Offer 30. 包含 min 函数的栈</span></p>\n<p>知识点：栈、队列、设计，难度为简单、简单</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMveW9uZy1saWFuZy1nZS16aGFuLXNoaS14aWFuLWR1aS1saWUtbGNvZi8=\">剑指 Offer 09. 用两个栈实现队列</span></td>\n<td>栈、设计、队列</td>\n<td>简单</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmFvLWhhbi1taW5oYW4tc2h1LWRlLXpoYW4tbGNvZi8=\">剑指 Offer 30. 包含 min 函数的栈</span></td>\n<td>栈、设计</td>\n<td>简单</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-09-用两个栈实现队列\"><a class=\"anchor\" href=\"#剑指-offer-09-用两个栈实现队列\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMveW9uZy1saWFuZy1nZS16aGFuLXNoaS14aWFuLWR1aS1saWUtbGNvZi8=\">剑指 Offer 09. 用两个栈实现队列</span></h1>\n<p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数  <code>appendTail</code>  和  <code>deleteHead</code>  ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素， <code>deleteHead</code>  操作返回 -1 )</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入：\n[&quot;CQueue&quot;,&quot;appendTail&quot;,&quot;deleteHead&quot;,&quot;deleteHead&quot;]\n[[],[3],[],[]]\n输出： [null,null,3,-1]\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：\n[&quot;CQueue&quot;,&quot;deleteHead&quot;,&quot;appendTail&quot;,&quot;appendTail&quot;,&quot;deleteHead&quot;,&quot;deleteHead&quot;]\n[[],[],[5],[2],[],[]]\n输出： [null,-1,null,null,5,2]\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= values &lt;= 10000</code></li>\n<li><code>最多会对 appendTail、deleteHead 进行 10000 次调用</code></li>\n</ul>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// @algorithm @lc id=100273 lang=javascript </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// @title yong-liang-ge-zhan-shi-xian-dui-lie-lcof</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">CQueue</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>        <span class=\"token comment\">// 入队</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>        <span class=\"token comment\">// 出队</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/** </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @param &#123;number&#125; value</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @return &#123;void&#125;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">CQueue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">appendTail</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">CQueue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">deleteHead</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s2<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s2<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> * Your CQueue object will be instantiated and called as such:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> * var obj = new CQueue()</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> * obj.appendTail(value)</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> * var param_2 = obj.deleteHead()</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 测试</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> obj<span class=\"token punctuation\">.</span><span class=\"token function\">appendTail</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> obj<span class=\"token punctuation\">.</span><span class=\"token function\">appendTail</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre> obj<span class=\"token punctuation\">.</span><span class=\"token function\">appendTail</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">deleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">deleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">deleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-30-包含min函数的栈\"><a class=\"anchor\" href=\"#剑指-offer-30-包含min函数的栈\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmFvLWhhbi1taW5oYW4tc2h1LWRlLXpoYW4tbGNvZi8=\">剑指 Offer 30. 包含 min 函数的栈</span></h1>\n<p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O (1)。</p>\n<p><strong>示例:</strong></p>\n<pre><code>MinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.min();   --&gt; 返回 -3.\nminStack.pop();\nminStack.top();      --&gt; 返回 0.\nminStack.min();   --&gt; 返回 -2.\n</code></pre>\n<p><strong>提示：</strong></p>\n<ol>\n<li>各函数的调用总次数不超过 20000 次</li>\n</ol>\n<p>注意：本题与主站 155 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWluLXN0YWNrLw==\">https://leetcode-cn.com/problems/min-stack/</span></p>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// @algorithm @lc id=100302 lang=javascript </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// @title bao-han-minhan-shu-de-zhan-lcof</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * initialize your data structure here.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">MinStack</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mins <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/** </pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @param &#123;number&#125; x</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @return &#123;void&#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">MinStack</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">push</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mins<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">&lt;=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mins<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mins<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//push 的元素小于当前元素，将其放入 mins</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mins<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> * @return &#123;void&#125;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token class-name\">MinStack</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">pop</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mins<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mins<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果 pop 的元素是 mins 的最后一个元素，则 mins 也要 pop</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mins<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token class-name\">MinStack</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">top</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"38\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"39\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre> <span class=\"token class-name\">MinStack</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">min</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mins<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mins<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"45\"></td><td><pre> * Your MinStack object will be instantiated and called as such:</pre></td></tr><tr><td data-num=\"46\"></td><td><pre> * var obj = new MinStack()</pre></td></tr><tr><td data-num=\"47\"></td><td><pre> * obj.push(x)</pre></td></tr><tr><td data-num=\"48\"></td><td><pre> * obj.pop()</pre></td></tr><tr><td data-num=\"49\"></td><td><pre> * var param_3 = obj.top()</pre></td></tr><tr><td data-num=\"50\"></td><td><pre> * var param_4 = obj.min()</pre></td></tr><tr><td data-num=\"51\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre> <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MinStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre> obj<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre> obj<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre> obj<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// -3</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre> obj<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// -2</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "栈",
                "队列",
                "设计"
            ]
        }
    ]
}